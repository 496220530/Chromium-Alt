
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/indexeddb/indexeddb.mojom
//

package org.chromium.blink.mojom;

import org.chromium.mojo.bindings.DeserializationException;


class IdbDatabaseCallbacks_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<IdbDatabaseCallbacks, IdbDatabaseCallbacks.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<IdbDatabaseCallbacks, IdbDatabaseCallbacks.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.IDBDatabaseCallbacks";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, IdbDatabaseCallbacks impl) {
            return new Stub(core, impl);
        }

        @Override
        public IdbDatabaseCallbacks[] buildArray(int size) {
          return new IdbDatabaseCallbacks[size];
        }
    };


    private static final int FORCED_CLOSE_ORDINAL = 0;

    private static final int VERSION_CHANGE_ORDINAL = 1;

    private static final int ABORT_ORDINAL = 2;

    private static final int COMPLETE_ORDINAL = 3;

    private static final int CHANGES_ORDINAL = 4;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements IdbDatabaseCallbacks.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void forcedClose(
) {

            IdbDatabaseCallbacksForcedCloseParams _message = new IdbDatabaseCallbacksForcedCloseParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FORCED_CLOSE_ORDINAL)));

        }


        @Override
        public void versionChange(
long oldVersion, long newVersion) {

            IdbDatabaseCallbacksVersionChangeParams _message = new IdbDatabaseCallbacksVersionChangeParams();

            _message.oldVersion = oldVersion;

            _message.newVersion = newVersion;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(VERSION_CHANGE_ORDINAL)));

        }


        @Override
        public void abort(
long transactionId, int code, org.chromium.mojo_base.mojom.String16 message) {

            IdbDatabaseCallbacksAbortParams _message = new IdbDatabaseCallbacksAbortParams();

            _message.transactionId = transactionId;

            _message.code = code;

            _message.message = message;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ABORT_ORDINAL)));

        }


        @Override
        public void complete(
long transactionId) {

            IdbDatabaseCallbacksCompleteParams _message = new IdbDatabaseCallbacksCompleteParams();

            _message.transactionId = transactionId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(COMPLETE_ORDINAL)));

        }


        @Override
        public void changes(
IdbObserverChanges changes) {

            IdbDatabaseCallbacksChangesParams _message = new IdbDatabaseCallbacksChangesParams();

            _message.changes = changes;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CHANGES_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<IdbDatabaseCallbacks> {

        Stub(org.chromium.mojo.system.Core core, IdbDatabaseCallbacks impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                IdbDatabaseCallbacks_Internal.MANAGER, messageWithHeader);





                    case FORCED_CLOSE_ORDINAL: {

                        IdbDatabaseCallbacksForcedCloseParams.deserialize(messageWithHeader.getPayload());

                        getImpl().forcedClose();
                        return true;
                    }





                    case VERSION_CHANGE_ORDINAL: {

                        IdbDatabaseCallbacksVersionChangeParams data =
                                IdbDatabaseCallbacksVersionChangeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().versionChange(data.oldVersion, data.newVersion);
                        return true;
                    }





                    case ABORT_ORDINAL: {

                        IdbDatabaseCallbacksAbortParams data =
                                IdbDatabaseCallbacksAbortParams.deserialize(messageWithHeader.getPayload());

                        getImpl().abort(data.transactionId, data.code, data.message);
                        return true;
                    }





                    case COMPLETE_ORDINAL: {

                        IdbDatabaseCallbacksCompleteParams data =
                                IdbDatabaseCallbacksCompleteParams.deserialize(messageWithHeader.getPayload());

                        getImpl().complete(data.transactionId);
                        return true;
                    }





                    case CHANGES_ORDINAL: {

                        IdbDatabaseCallbacksChangesParams data =
                                IdbDatabaseCallbacksChangesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().changes(data.changes);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), IdbDatabaseCallbacks_Internal.MANAGER, messageWithHeader, receiver);












                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class IdbDatabaseCallbacksForcedCloseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private IdbDatabaseCallbacksForcedCloseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseCallbacksForcedCloseParams() {
            this(0);
        }

        public static IdbDatabaseCallbacksForcedCloseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseCallbacksForcedCloseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseCallbacksForcedCloseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseCallbacksForcedCloseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseCallbacksForcedCloseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class IdbDatabaseCallbacksVersionChangeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long oldVersion;
        public long newVersion;

        private IdbDatabaseCallbacksVersionChangeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseCallbacksVersionChangeParams() {
            this(0);
        }

        public static IdbDatabaseCallbacksVersionChangeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseCallbacksVersionChangeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseCallbacksVersionChangeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseCallbacksVersionChangeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseCallbacksVersionChangeParams(elementsOrVersion);
                    {
                        
                    result.oldVersion = decoder0.readLong(8);
                    }
                    {
                        
                    result.newVersion = decoder0.readLong(16);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.oldVersion, 8);
            
            encoder0.encode(this.newVersion, 16);
        }
    }



    
    static final class IdbDatabaseCallbacksAbortParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public int code;
        public org.chromium.mojo_base.mojom.String16 message;

        private IdbDatabaseCallbacksAbortParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseCallbacksAbortParams() {
            this(0);
        }

        public static IdbDatabaseCallbacksAbortParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseCallbacksAbortParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseCallbacksAbortParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseCallbacksAbortParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseCallbacksAbortParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.code = decoder0.readInt(16);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.message = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.code, 16);
            
            encoder0.encode(this.message, 24, false);
        }
    }



    
    static final class IdbDatabaseCallbacksCompleteParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;

        private IdbDatabaseCallbacksCompleteParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseCallbacksCompleteParams() {
            this(0);
        }

        public static IdbDatabaseCallbacksCompleteParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseCallbacksCompleteParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseCallbacksCompleteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseCallbacksCompleteParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseCallbacksCompleteParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
        }
    }



    
    static final class IdbDatabaseCallbacksChangesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public IdbObserverChanges changes;

        private IdbDatabaseCallbacksChangesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseCallbacksChangesParams() {
            this(0);
        }

        public static IdbDatabaseCallbacksChangesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseCallbacksChangesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseCallbacksChangesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseCallbacksChangesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseCallbacksChangesParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.changes = IdbObserverChanges.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.changes, 8, false);
        }
    }



}
