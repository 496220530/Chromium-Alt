
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/indexeddb/indexeddb.mojom
//

package org.chromium.blink.mojom;

import org.chromium.mojo.bindings.DeserializationException;


class IdbDatabase_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<IdbDatabase, IdbDatabase.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<IdbDatabase, IdbDatabase.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.IDBDatabase";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, IdbDatabase impl) {
            return new Stub(core, impl);
        }

        @Override
        public IdbDatabase[] buildArray(int size) {
          return new IdbDatabase[size];
        }
    };


    private static final int CREATE_OBJECT_STORE_ORDINAL = 0;

    private static final int DELETE_OBJECT_STORE_ORDINAL = 1;

    private static final int RENAME_OBJECT_STORE_ORDINAL = 2;

    private static final int CREATE_TRANSACTION_ORDINAL = 3;

    private static final int CLOSE_ORDINAL = 4;

    private static final int VERSION_CHANGE_IGNORED_ORDINAL = 5;

    private static final int ADD_OBSERVER_ORDINAL = 6;

    private static final int REMOVE_OBSERVERS_ORDINAL = 7;

    private static final int GET_ORDINAL = 8;

    private static final int GET_ALL_ORDINAL = 9;

    private static final int PUT_ORDINAL = 10;

    private static final int SET_INDEX_KEYS_ORDINAL = 11;

    private static final int SET_INDEXES_READY_ORDINAL = 12;

    private static final int OPEN_CURSOR_ORDINAL = 13;

    private static final int COUNT_ORDINAL = 14;

    private static final int DELETE_RANGE_ORDINAL = 15;

    private static final int CLEAR_ORDINAL = 16;

    private static final int CREATE_INDEX_ORDINAL = 17;

    private static final int DELETE_INDEX_ORDINAL = 18;

    private static final int RENAME_INDEX_ORDINAL = 19;

    private static final int ABORT_ORDINAL = 20;

    private static final int COMMIT_ORDINAL = 21;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements IdbDatabase.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void createObjectStore(
long transactionId, long objectStoreId, org.chromium.mojo_base.mojom.String16 name, IdbKeyPath keyPath, boolean autoIncrement) {

            IdbDatabaseCreateObjectStoreParams _message = new IdbDatabaseCreateObjectStoreParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;

            _message.name = name;

            _message.keyPath = keyPath;

            _message.autoIncrement = autoIncrement;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_OBJECT_STORE_ORDINAL)));

        }


        @Override
        public void deleteObjectStore(
long transactionId, long objectStoreId) {

            IdbDatabaseDeleteObjectStoreParams _message = new IdbDatabaseDeleteObjectStoreParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DELETE_OBJECT_STORE_ORDINAL)));

        }


        @Override
        public void renameObjectStore(
long transactionId, long objectStoreId, org.chromium.mojo_base.mojom.String16 newName) {

            IdbDatabaseRenameObjectStoreParams _message = new IdbDatabaseRenameObjectStoreParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;

            _message.newName = newName;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(RENAME_OBJECT_STORE_ORDINAL)));

        }


        @Override
        public void createTransaction(
long transactionId, long[] objectStoreIds, int mode) {

            IdbDatabaseCreateTransactionParams _message = new IdbDatabaseCreateTransactionParams();

            _message.transactionId = transactionId;

            _message.objectStoreIds = objectStoreIds;

            _message.mode = mode;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_TRANSACTION_ORDINAL)));

        }


        @Override
        public void close(
) {

            IdbDatabaseCloseParams _message = new IdbDatabaseCloseParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CLOSE_ORDINAL)));

        }


        @Override
        public void versionChangeIgnored(
) {

            IdbDatabaseVersionChangeIgnoredParams _message = new IdbDatabaseVersionChangeIgnoredParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(VERSION_CHANGE_IGNORED_ORDINAL)));

        }


        @Override
        public void addObserver(
long transactionId, int observerId, boolean includeTransaction, boolean noRecords, boolean values, short operationTypes) {

            IdbDatabaseAddObserverParams _message = new IdbDatabaseAddObserverParams();

            _message.transactionId = transactionId;

            _message.observerId = observerId;

            _message.includeTransaction = includeTransaction;

            _message.noRecords = noRecords;

            _message.values = values;

            _message.operationTypes = operationTypes;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADD_OBSERVER_ORDINAL)));

        }


        @Override
        public void removeObservers(
int[] observers) {

            IdbDatabaseRemoveObserversParams _message = new IdbDatabaseRemoveObserversParams();

            _message.observers = observers;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REMOVE_OBSERVERS_ORDINAL)));

        }


        @Override
        public void get(
long transactionId, long objectStoreId, long indexId, IdbKeyRange keyRange, boolean keyOnly, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks) {

            IdbDatabaseGetParams _message = new IdbDatabaseGetParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;

            _message.indexId = indexId;

            _message.keyRange = keyRange;

            _message.keyOnly = keyOnly;

            _message.callbacks = callbacks;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_ORDINAL)));

        }


        @Override
        public void getAll(
long transactionId, long objectStoreId, long indexId, IdbKeyRange keyRange, boolean keyOnly, long maxCount, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks) {

            IdbDatabaseGetAllParams _message = new IdbDatabaseGetAllParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;

            _message.indexId = indexId;

            _message.keyRange = keyRange;

            _message.keyOnly = keyOnly;

            _message.maxCount = maxCount;

            _message.callbacks = callbacks;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_ALL_ORDINAL)));

        }


        @Override
        public void put(
long transactionId, long objectStoreId, IdbValue value, IdbKey key, int mode, IdbIndexKeys[] indexKeys, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks) {

            IdbDatabasePutParams _message = new IdbDatabasePutParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;

            _message.value = value;

            _message.key = key;

            _message.mode = mode;

            _message.indexKeys = indexKeys;

            _message.callbacks = callbacks;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(PUT_ORDINAL)));

        }


        @Override
        public void setIndexKeys(
long transactionId, long objectStoreId, IdbKey primaryKey, IdbIndexKeys[] indexKeys) {

            IdbDatabaseSetIndexKeysParams _message = new IdbDatabaseSetIndexKeysParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;

            _message.primaryKey = primaryKey;

            _message.indexKeys = indexKeys;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_INDEX_KEYS_ORDINAL)));

        }


        @Override
        public void setIndexesReady(
long transactionId, long objectStoreId, long[] indexIds) {

            IdbDatabaseSetIndexesReadyParams _message = new IdbDatabaseSetIndexesReadyParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;

            _message.indexIds = indexIds;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_INDEXES_READY_ORDINAL)));

        }


        @Override
        public void openCursor(
long transactionId, long objectStoreId, long indexId, IdbKeyRange keyRange, int direction, boolean keyOnly, int taskType, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks) {

            IdbDatabaseOpenCursorParams _message = new IdbDatabaseOpenCursorParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;

            _message.indexId = indexId;

            _message.keyRange = keyRange;

            _message.direction = direction;

            _message.keyOnly = keyOnly;

            _message.taskType = taskType;

            _message.callbacks = callbacks;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(OPEN_CURSOR_ORDINAL)));

        }


        @Override
        public void count(
long transactionId, long objectStoreId, long indexId, IdbKeyRange keyRange, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks) {

            IdbDatabaseCountParams _message = new IdbDatabaseCountParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;

            _message.indexId = indexId;

            _message.keyRange = keyRange;

            _message.callbacks = callbacks;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(COUNT_ORDINAL)));

        }


        @Override
        public void deleteRange(
long transactionId, long objectStoreId, IdbKeyRange keyRange, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks) {

            IdbDatabaseDeleteRangeParams _message = new IdbDatabaseDeleteRangeParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;

            _message.keyRange = keyRange;

            _message.callbacks = callbacks;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DELETE_RANGE_ORDINAL)));

        }


        @Override
        public void clear(
long transactionId, long objectStoreId, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks) {

            IdbDatabaseClearParams _message = new IdbDatabaseClearParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;

            _message.callbacks = callbacks;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CLEAR_ORDINAL)));

        }


        @Override
        public void createIndex(
long transactionId, long objectStoreId, long indexId, org.chromium.mojo_base.mojom.String16 name, IdbKeyPath keyPath, boolean unique, boolean multiEntry) {

            IdbDatabaseCreateIndexParams _message = new IdbDatabaseCreateIndexParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;

            _message.indexId = indexId;

            _message.name = name;

            _message.keyPath = keyPath;

            _message.unique = unique;

            _message.multiEntry = multiEntry;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_INDEX_ORDINAL)));

        }


        @Override
        public void deleteIndex(
long transactionId, long objectStoreId, long indexId) {

            IdbDatabaseDeleteIndexParams _message = new IdbDatabaseDeleteIndexParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;

            _message.indexId = indexId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DELETE_INDEX_ORDINAL)));

        }


        @Override
        public void renameIndex(
long transactionId, long objectStoreId, long indexId, org.chromium.mojo_base.mojom.String16 newName) {

            IdbDatabaseRenameIndexParams _message = new IdbDatabaseRenameIndexParams();

            _message.transactionId = transactionId;

            _message.objectStoreId = objectStoreId;

            _message.indexId = indexId;

            _message.newName = newName;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(RENAME_INDEX_ORDINAL)));

        }


        @Override
        public void abort(
long transactionId) {

            IdbDatabaseAbortParams _message = new IdbDatabaseAbortParams();

            _message.transactionId = transactionId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ABORT_ORDINAL)));

        }


        @Override
        public void commit(
long transactionId) {

            IdbDatabaseCommitParams _message = new IdbDatabaseCommitParams();

            _message.transactionId = transactionId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(COMMIT_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<IdbDatabase> {

        Stub(org.chromium.mojo.system.Core core, IdbDatabase impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                IdbDatabase_Internal.MANAGER, messageWithHeader);





                    case CREATE_OBJECT_STORE_ORDINAL: {

                        IdbDatabaseCreateObjectStoreParams data =
                                IdbDatabaseCreateObjectStoreParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createObjectStore(data.transactionId, data.objectStoreId, data.name, data.keyPath, data.autoIncrement);
                        return true;
                    }





                    case DELETE_OBJECT_STORE_ORDINAL: {

                        IdbDatabaseDeleteObjectStoreParams data =
                                IdbDatabaseDeleteObjectStoreParams.deserialize(messageWithHeader.getPayload());

                        getImpl().deleteObjectStore(data.transactionId, data.objectStoreId);
                        return true;
                    }





                    case RENAME_OBJECT_STORE_ORDINAL: {

                        IdbDatabaseRenameObjectStoreParams data =
                                IdbDatabaseRenameObjectStoreParams.deserialize(messageWithHeader.getPayload());

                        getImpl().renameObjectStore(data.transactionId, data.objectStoreId, data.newName);
                        return true;
                    }





                    case CREATE_TRANSACTION_ORDINAL: {

                        IdbDatabaseCreateTransactionParams data =
                                IdbDatabaseCreateTransactionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createTransaction(data.transactionId, data.objectStoreIds, data.mode);
                        return true;
                    }





                    case CLOSE_ORDINAL: {

                        IdbDatabaseCloseParams.deserialize(messageWithHeader.getPayload());

                        getImpl().close();
                        return true;
                    }





                    case VERSION_CHANGE_IGNORED_ORDINAL: {

                        IdbDatabaseVersionChangeIgnoredParams.deserialize(messageWithHeader.getPayload());

                        getImpl().versionChangeIgnored();
                        return true;
                    }





                    case ADD_OBSERVER_ORDINAL: {

                        IdbDatabaseAddObserverParams data =
                                IdbDatabaseAddObserverParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addObserver(data.transactionId, data.observerId, data.includeTransaction, data.noRecords, data.values, data.operationTypes);
                        return true;
                    }





                    case REMOVE_OBSERVERS_ORDINAL: {

                        IdbDatabaseRemoveObserversParams data =
                                IdbDatabaseRemoveObserversParams.deserialize(messageWithHeader.getPayload());

                        getImpl().removeObservers(data.observers);
                        return true;
                    }





                    case GET_ORDINAL: {

                        IdbDatabaseGetParams data =
                                IdbDatabaseGetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().get(data.transactionId, data.objectStoreId, data.indexId, data.keyRange, data.keyOnly, data.callbacks);
                        return true;
                    }





                    case GET_ALL_ORDINAL: {

                        IdbDatabaseGetAllParams data =
                                IdbDatabaseGetAllParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getAll(data.transactionId, data.objectStoreId, data.indexId, data.keyRange, data.keyOnly, data.maxCount, data.callbacks);
                        return true;
                    }





                    case PUT_ORDINAL: {

                        IdbDatabasePutParams data =
                                IdbDatabasePutParams.deserialize(messageWithHeader.getPayload());

                        getImpl().put(data.transactionId, data.objectStoreId, data.value, data.key, data.mode, data.indexKeys, data.callbacks);
                        return true;
                    }





                    case SET_INDEX_KEYS_ORDINAL: {

                        IdbDatabaseSetIndexKeysParams data =
                                IdbDatabaseSetIndexKeysParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setIndexKeys(data.transactionId, data.objectStoreId, data.primaryKey, data.indexKeys);
                        return true;
                    }





                    case SET_INDEXES_READY_ORDINAL: {

                        IdbDatabaseSetIndexesReadyParams data =
                                IdbDatabaseSetIndexesReadyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setIndexesReady(data.transactionId, data.objectStoreId, data.indexIds);
                        return true;
                    }





                    case OPEN_CURSOR_ORDINAL: {

                        IdbDatabaseOpenCursorParams data =
                                IdbDatabaseOpenCursorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().openCursor(data.transactionId, data.objectStoreId, data.indexId, data.keyRange, data.direction, data.keyOnly, data.taskType, data.callbacks);
                        return true;
                    }





                    case COUNT_ORDINAL: {

                        IdbDatabaseCountParams data =
                                IdbDatabaseCountParams.deserialize(messageWithHeader.getPayload());

                        getImpl().count(data.transactionId, data.objectStoreId, data.indexId, data.keyRange, data.callbacks);
                        return true;
                    }





                    case DELETE_RANGE_ORDINAL: {

                        IdbDatabaseDeleteRangeParams data =
                                IdbDatabaseDeleteRangeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().deleteRange(data.transactionId, data.objectStoreId, data.keyRange, data.callbacks);
                        return true;
                    }





                    case CLEAR_ORDINAL: {

                        IdbDatabaseClearParams data =
                                IdbDatabaseClearParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clear(data.transactionId, data.objectStoreId, data.callbacks);
                        return true;
                    }





                    case CREATE_INDEX_ORDINAL: {

                        IdbDatabaseCreateIndexParams data =
                                IdbDatabaseCreateIndexParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createIndex(data.transactionId, data.objectStoreId, data.indexId, data.name, data.keyPath, data.unique, data.multiEntry);
                        return true;
                    }





                    case DELETE_INDEX_ORDINAL: {

                        IdbDatabaseDeleteIndexParams data =
                                IdbDatabaseDeleteIndexParams.deserialize(messageWithHeader.getPayload());

                        getImpl().deleteIndex(data.transactionId, data.objectStoreId, data.indexId);
                        return true;
                    }





                    case RENAME_INDEX_ORDINAL: {

                        IdbDatabaseRenameIndexParams data =
                                IdbDatabaseRenameIndexParams.deserialize(messageWithHeader.getPayload());

                        getImpl().renameIndex(data.transactionId, data.objectStoreId, data.indexId, data.newName);
                        return true;
                    }





                    case ABORT_ORDINAL: {

                        IdbDatabaseAbortParams data =
                                IdbDatabaseAbortParams.deserialize(messageWithHeader.getPayload());

                        getImpl().abort(data.transactionId);
                        return true;
                    }





                    case COMMIT_ORDINAL: {

                        IdbDatabaseCommitParams data =
                                IdbDatabaseCommitParams.deserialize(messageWithHeader.getPayload());

                        getImpl().commit(data.transactionId);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), IdbDatabase_Internal.MANAGER, messageWithHeader, receiver);














































                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class IdbDatabaseCreateObjectStoreParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;
        public org.chromium.mojo_base.mojom.String16 name;
        public IdbKeyPath keyPath;
        public boolean autoIncrement;

        private IdbDatabaseCreateObjectStoreParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseCreateObjectStoreParams() {
            this(0);
        }

        public static IdbDatabaseCreateObjectStoreParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseCreateObjectStoreParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseCreateObjectStoreParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseCreateObjectStoreParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseCreateObjectStoreParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.name = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.keyPath = IdbKeyPath.decode(decoder1);
                    }
                    {
                        
                    result.autoIncrement = decoder0.readBoolean(40, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
            
            encoder0.encode(this.name, 24, false);
            
            encoder0.encode(this.keyPath, 32, false);
            
            encoder0.encode(this.autoIncrement, 40, 0);
        }
    }



    
    static final class IdbDatabaseDeleteObjectStoreParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;

        private IdbDatabaseDeleteObjectStoreParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseDeleteObjectStoreParams() {
            this(0);
        }

        public static IdbDatabaseDeleteObjectStoreParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseDeleteObjectStoreParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseDeleteObjectStoreParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseDeleteObjectStoreParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseDeleteObjectStoreParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
        }
    }



    
    static final class IdbDatabaseRenameObjectStoreParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;
        public org.chromium.mojo_base.mojom.String16 newName;

        private IdbDatabaseRenameObjectStoreParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseRenameObjectStoreParams() {
            this(0);
        }

        public static IdbDatabaseRenameObjectStoreParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseRenameObjectStoreParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseRenameObjectStoreParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseRenameObjectStoreParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseRenameObjectStoreParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.newName = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
            
            encoder0.encode(this.newName, 24, false);
        }
    }



    
    static final class IdbDatabaseCreateTransactionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long[] objectStoreIds;
        public int mode;

        private IdbDatabaseCreateTransactionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseCreateTransactionParams() {
            this(0);
        }

        public static IdbDatabaseCreateTransactionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseCreateTransactionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseCreateTransactionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseCreateTransactionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseCreateTransactionParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreIds = decoder0.readLongs(16, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    }
                    {
                        
                    result.mode = decoder0.readInt(24);
                        IdbTransactionMode.validate(result.mode);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreIds, 16, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            
            encoder0.encode(this.mode, 24);
        }
    }



    
    static final class IdbDatabaseCloseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private IdbDatabaseCloseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseCloseParams() {
            this(0);
        }

        public static IdbDatabaseCloseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseCloseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseCloseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseCloseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseCloseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class IdbDatabaseVersionChangeIgnoredParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private IdbDatabaseVersionChangeIgnoredParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseVersionChangeIgnoredParams() {
            this(0);
        }

        public static IdbDatabaseVersionChangeIgnoredParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseVersionChangeIgnoredParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseVersionChangeIgnoredParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseVersionChangeIgnoredParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseVersionChangeIgnoredParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class IdbDatabaseAddObserverParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public int observerId;
        public boolean includeTransaction;
        public boolean noRecords;
        public boolean values;
        public short operationTypes;

        private IdbDatabaseAddObserverParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseAddObserverParams() {
            this(0);
        }

        public static IdbDatabaseAddObserverParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseAddObserverParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseAddObserverParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseAddObserverParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseAddObserverParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.observerId = decoder0.readInt(16);
                    }
                    {
                        
                    result.includeTransaction = decoder0.readBoolean(20, 0);
                    }
                    {
                        
                    result.noRecords = decoder0.readBoolean(20, 1);
                    }
                    {
                        
                    result.values = decoder0.readBoolean(20, 2);
                    }
                    {
                        
                    result.operationTypes = decoder0.readShort(22);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.observerId, 16);
            
            encoder0.encode(this.includeTransaction, 20, 0);
            
            encoder0.encode(this.noRecords, 20, 1);
            
            encoder0.encode(this.values, 20, 2);
            
            encoder0.encode(this.operationTypes, 22);
        }
    }



    
    static final class IdbDatabaseRemoveObserversParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int[] observers;

        private IdbDatabaseRemoveObserversParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseRemoveObserversParams() {
            this(0);
        }

        public static IdbDatabaseRemoveObserversParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseRemoveObserversParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseRemoveObserversParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseRemoveObserversParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseRemoveObserversParams(elementsOrVersion);
                    {
                        
                    result.observers = decoder0.readInts(8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.observers, 8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
    }



    
    static final class IdbDatabaseGetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 56;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(56, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;
        public long indexId;
        public IdbKeyRange keyRange;
        public boolean keyOnly;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks;

        private IdbDatabaseGetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseGetParams() {
            this(0);
        }

        public static IdbDatabaseGetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseGetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseGetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseGetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseGetParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }
                    {
                        
                    result.indexId = decoder0.readLong(24);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.keyRange = IdbKeyRange.decode(decoder1);
                    }
                    {
                        
                    result.keyOnly = decoder0.readBoolean(40, 0);
                    }
                    {
                        
                    result.callbacks = decoder0.readAssociatedServiceInterfaceNotSupported(44, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
            
            encoder0.encode(this.indexId, 24);
            
            encoder0.encode(this.keyRange, 32, false);
            
            encoder0.encode(this.keyOnly, 40, 0);
            
            encoder0.encode(this.callbacks, 44, false);
        }
    }



    
    static final class IdbDatabaseGetAllParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 64;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(64, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;
        public long indexId;
        public IdbKeyRange keyRange;
        public boolean keyOnly;
        public long maxCount;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks;

        private IdbDatabaseGetAllParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseGetAllParams() {
            this(0);
        }

        public static IdbDatabaseGetAllParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseGetAllParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseGetAllParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseGetAllParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseGetAllParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }
                    {
                        
                    result.indexId = decoder0.readLong(24);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.keyRange = IdbKeyRange.decode(decoder1);
                    }
                    {
                        
                    result.keyOnly = decoder0.readBoolean(40, 0);
                    }
                    {
                        
                    result.maxCount = decoder0.readLong(48);
                    }
                    {
                        
                    result.callbacks = decoder0.readAssociatedServiceInterfaceNotSupported(56, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
            
            encoder0.encode(this.indexId, 24);
            
            encoder0.encode(this.keyRange, 32, false);
            
            encoder0.encode(this.keyOnly, 40, 0);
            
            encoder0.encode(this.maxCount, 48);
            
            encoder0.encode(this.callbacks, 56, false);
        }
    }



    
    static final class IdbDatabasePutParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 64;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(64, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;
        public IdbValue value;
        public IdbKey key;
        public int mode;
        public IdbIndexKeys[] indexKeys;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks;

        private IdbDatabasePutParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabasePutParams() {
            this(0);
        }

        public static IdbDatabasePutParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabasePutParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabasePutParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabasePutParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabasePutParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.value = IdbValue.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.key = IdbKey.decode(decoder1);
                    }
                    {
                        
                    result.mode = decoder0.readInt(40);
                        IdbPutMode.validate(result.mode);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.indexKeys = new IdbIndexKeys[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.indexKeys[i1] = IdbIndexKeys.decode(decoder2);
                        }
                    }
                    }
                    {
                        
                    result.callbacks = decoder0.readAssociatedServiceInterfaceNotSupported(56, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
            
            encoder0.encode(this.value, 24, false);
            
            encoder0.encode(this.key, 32, false);
            
            encoder0.encode(this.mode, 40);
            
            if (this.indexKeys == null) {
                encoder0.encodeNullPointer(48, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.indexKeys.length, 48, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.indexKeys.length; ++i0) {
                    
                    encoder1.encode(this.indexKeys[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
            
            encoder0.encode(this.callbacks, 56, false);
        }
    }



    
    static final class IdbDatabaseSetIndexKeysParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;
        public IdbKey primaryKey;
        public IdbIndexKeys[] indexKeys;

        private IdbDatabaseSetIndexKeysParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseSetIndexKeysParams() {
            this(0);
        }

        public static IdbDatabaseSetIndexKeysParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseSetIndexKeysParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseSetIndexKeysParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseSetIndexKeysParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseSetIndexKeysParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.primaryKey = IdbKey.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.indexKeys = new IdbIndexKeys[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.indexKeys[i1] = IdbIndexKeys.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
            
            encoder0.encode(this.primaryKey, 24, false);
            
            if (this.indexKeys == null) {
                encoder0.encodeNullPointer(32, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.indexKeys.length, 32, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.indexKeys.length; ++i0) {
                    
                    encoder1.encode(this.indexKeys[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class IdbDatabaseSetIndexesReadyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;
        public long[] indexIds;

        private IdbDatabaseSetIndexesReadyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseSetIndexesReadyParams() {
            this(0);
        }

        public static IdbDatabaseSetIndexesReadyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseSetIndexesReadyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseSetIndexesReadyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseSetIndexesReadyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseSetIndexesReadyParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }
                    {
                        
                    result.indexIds = decoder0.readLongs(24, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
            
            encoder0.encode(this.indexIds, 24, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
    }



    
    static final class IdbDatabaseOpenCursorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 64;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(64, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;
        public long indexId;
        public IdbKeyRange keyRange;
        public int direction;
        public boolean keyOnly;
        public int taskType;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks;

        private IdbDatabaseOpenCursorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseOpenCursorParams() {
            this(0);
        }

        public static IdbDatabaseOpenCursorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseOpenCursorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseOpenCursorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseOpenCursorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseOpenCursorParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }
                    {
                        
                    result.indexId = decoder0.readLong(24);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.keyRange = IdbKeyRange.decode(decoder1);
                    }
                    {
                        
                    result.direction = decoder0.readInt(40);
                        IdbCursorDirection.validate(result.direction);
                    }
                    {
                        
                    result.keyOnly = decoder0.readBoolean(44, 0);
                    }
                    {
                        
                    result.taskType = decoder0.readInt(48);
                        IdbTaskType.validate(result.taskType);
                    }
                    {
                        
                    result.callbacks = decoder0.readAssociatedServiceInterfaceNotSupported(52, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
            
            encoder0.encode(this.indexId, 24);
            
            encoder0.encode(this.keyRange, 32, false);
            
            encoder0.encode(this.direction, 40);
            
            encoder0.encode(this.keyOnly, 44, 0);
            
            encoder0.encode(this.taskType, 48);
            
            encoder0.encode(this.callbacks, 52, false);
        }
    }



    
    static final class IdbDatabaseCountParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;
        public long indexId;
        public IdbKeyRange keyRange;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks;

        private IdbDatabaseCountParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseCountParams() {
            this(0);
        }

        public static IdbDatabaseCountParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseCountParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseCountParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseCountParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseCountParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }
                    {
                        
                    result.indexId = decoder0.readLong(24);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.keyRange = IdbKeyRange.decode(decoder1);
                    }
                    {
                        
                    result.callbacks = decoder0.readAssociatedServiceInterfaceNotSupported(40, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
            
            encoder0.encode(this.indexId, 24);
            
            encoder0.encode(this.keyRange, 32, false);
            
            encoder0.encode(this.callbacks, 40, false);
        }
    }



    
    static final class IdbDatabaseDeleteRangeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;
        public IdbKeyRange keyRange;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks;

        private IdbDatabaseDeleteRangeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseDeleteRangeParams() {
            this(0);
        }

        public static IdbDatabaseDeleteRangeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseDeleteRangeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseDeleteRangeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseDeleteRangeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseDeleteRangeParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.keyRange = IdbKeyRange.decode(decoder1);
                    }
                    {
                        
                    result.callbacks = decoder0.readAssociatedServiceInterfaceNotSupported(32, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
            
            encoder0.encode(this.keyRange, 24, false);
            
            encoder0.encode(this.callbacks, 32, false);
        }
    }



    
    static final class IdbDatabaseClearParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks;

        private IdbDatabaseClearParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseClearParams() {
            this(0);
        }

        public static IdbDatabaseClearParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseClearParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseClearParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseClearParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseClearParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }
                    {
                        
                    result.callbacks = decoder0.readAssociatedServiceInterfaceNotSupported(24, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
            
            encoder0.encode(this.callbacks, 24, false);
        }
    }



    
    static final class IdbDatabaseCreateIndexParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 56;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(56, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;
        public long indexId;
        public org.chromium.mojo_base.mojom.String16 name;
        public IdbKeyPath keyPath;
        public boolean unique;
        public boolean multiEntry;

        private IdbDatabaseCreateIndexParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseCreateIndexParams() {
            this(0);
        }

        public static IdbDatabaseCreateIndexParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseCreateIndexParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseCreateIndexParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseCreateIndexParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseCreateIndexParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }
                    {
                        
                    result.indexId = decoder0.readLong(24);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.name = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                    result.keyPath = IdbKeyPath.decode(decoder1);
                    }
                    {
                        
                    result.unique = decoder0.readBoolean(48, 0);
                    }
                    {
                        
                    result.multiEntry = decoder0.readBoolean(48, 1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
            
            encoder0.encode(this.indexId, 24);
            
            encoder0.encode(this.name, 32, false);
            
            encoder0.encode(this.keyPath, 40, false);
            
            encoder0.encode(this.unique, 48, 0);
            
            encoder0.encode(this.multiEntry, 48, 1);
        }
    }



    
    static final class IdbDatabaseDeleteIndexParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;
        public long indexId;

        private IdbDatabaseDeleteIndexParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseDeleteIndexParams() {
            this(0);
        }

        public static IdbDatabaseDeleteIndexParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseDeleteIndexParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseDeleteIndexParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseDeleteIndexParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseDeleteIndexParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }
                    {
                        
                    result.indexId = decoder0.readLong(24);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
            
            encoder0.encode(this.indexId, 24);
        }
    }



    
    static final class IdbDatabaseRenameIndexParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;
        public long objectStoreId;
        public long indexId;
        public org.chromium.mojo_base.mojom.String16 newName;

        private IdbDatabaseRenameIndexParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseRenameIndexParams() {
            this(0);
        }

        public static IdbDatabaseRenameIndexParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseRenameIndexParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseRenameIndexParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseRenameIndexParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseRenameIndexParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }
                    {
                        
                    result.objectStoreId = decoder0.readLong(16);
                    }
                    {
                        
                    result.indexId = decoder0.readLong(24);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.newName = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
            
            encoder0.encode(this.objectStoreId, 16);
            
            encoder0.encode(this.indexId, 24);
            
            encoder0.encode(this.newName, 32, false);
        }
    }



    
    static final class IdbDatabaseAbortParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;

        private IdbDatabaseAbortParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseAbortParams() {
            this(0);
        }

        public static IdbDatabaseAbortParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseAbortParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseAbortParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseAbortParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseAbortParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
        }
    }



    
    static final class IdbDatabaseCommitParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long transactionId;

        private IdbDatabaseCommitParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbDatabaseCommitParams() {
            this(0);
        }

        public static IdbDatabaseCommitParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbDatabaseCommitParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbDatabaseCommitParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbDatabaseCommitParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbDatabaseCommitParams(elementsOrVersion);
                    {
                        
                    result.transactionId = decoder0.readLong(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.transactionId, 8);
        }
    }



}
