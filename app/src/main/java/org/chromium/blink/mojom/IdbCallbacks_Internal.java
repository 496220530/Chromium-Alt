
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/indexeddb/indexeddb.mojom
//

package org.chromium.blink.mojom;

import org.chromium.mojo.bindings.DeserializationException;


class IdbCallbacks_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<IdbCallbacks, IdbCallbacks.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<IdbCallbacks, IdbCallbacks.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.IDBCallbacks";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, IdbCallbacks impl) {
            return new Stub(core, impl);
        }

        @Override
        public IdbCallbacks[] buildArray(int size) {
          return new IdbCallbacks[size];
        }
    };


    private static final int ERROR_ORDINAL = 0;

    private static final int SUCCESS_STRING_LIST_ORDINAL = 1;

    private static final int BLOCKED_ORDINAL = 2;

    private static final int UPGRADE_NEEDED_ORDINAL = 3;

    private static final int SUCCESS_DATABASE_ORDINAL = 4;

    private static final int SUCCESS_CURSOR_ORDINAL = 5;

    private static final int SUCCESS_VALUE_ORDINAL = 6;

    private static final int SUCCESS_CURSOR_CONTINUE_ORDINAL = 7;

    private static final int SUCCESS_CURSOR_PREFETCH_ORDINAL = 8;

    private static final int SUCCESS_ARRAY_ORDINAL = 9;

    private static final int SUCCESS_KEY_ORDINAL = 10;

    private static final int SUCCESS_INTEGER_ORDINAL = 11;

    private static final int SUCCESS_ORDINAL = 12;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements IdbCallbacks.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void error(
int code, org.chromium.mojo_base.mojom.String16 message) {

            IdbCallbacksErrorParams _message = new IdbCallbacksErrorParams();

            _message.code = code;

            _message.message = message;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ERROR_ORDINAL)));

        }


        @Override
        public void successStringList(
org.chromium.mojo_base.mojom.String16[] value) {

            IdbCallbacksSuccessStringListParams _message = new IdbCallbacksSuccessStringListParams();

            _message.value = value;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SUCCESS_STRING_LIST_ORDINAL)));

        }


        @Override
        public void blocked(
long existingVersion) {

            IdbCallbacksBlockedParams _message = new IdbCallbacksBlockedParams();

            _message.existingVersion = existingVersion;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(BLOCKED_ORDINAL)));

        }


        @Override
        public void upgradeNeeded(
org.chromium.mojo.bindings.AssociatedInterfaceNotSupported database, long oldVersion, int dataLoss, String dataLossMessage, IdbDatabaseMetadata dbMetadata) {

            IdbCallbacksUpgradeNeededParams _message = new IdbCallbacksUpgradeNeededParams();

            _message.database = database;

            _message.oldVersion = oldVersion;

            _message.dataLoss = dataLoss;

            _message.dataLossMessage = dataLossMessage;

            _message.dbMetadata = dbMetadata;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPGRADE_NEEDED_ORDINAL)));

        }


        @Override
        public void successDatabase(
org.chromium.mojo.bindings.AssociatedInterfaceNotSupported database, IdbDatabaseMetadata metadata) {

            IdbCallbacksSuccessDatabaseParams _message = new IdbCallbacksSuccessDatabaseParams();

            _message.database = database;

            _message.metadata = metadata;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SUCCESS_DATABASE_ORDINAL)));

        }


        @Override
        public void successCursor(
org.chromium.mojo.bindings.AssociatedInterfaceNotSupported cursor, IdbKey key, IdbKey primaryKey, IdbValue value) {

            IdbCallbacksSuccessCursorParams _message = new IdbCallbacksSuccessCursorParams();

            _message.cursor = cursor;

            _message.key = key;

            _message.primaryKey = primaryKey;

            _message.value = value;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SUCCESS_CURSOR_ORDINAL)));

        }


        @Override
        public void successValue(
IdbReturnValue value) {

            IdbCallbacksSuccessValueParams _message = new IdbCallbacksSuccessValueParams();

            _message.value = value;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SUCCESS_VALUE_ORDINAL)));

        }


        @Override
        public void successCursorContinue(
IdbKey key, IdbKey primaryKey, IdbValue value) {

            IdbCallbacksSuccessCursorContinueParams _message = new IdbCallbacksSuccessCursorContinueParams();

            _message.key = key;

            _message.primaryKey = primaryKey;

            _message.value = value;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SUCCESS_CURSOR_CONTINUE_ORDINAL)));

        }


        @Override
        public void successCursorPrefetch(
IdbKey[] keys, IdbKey[] primaryKeys, IdbValue[] values) {

            IdbCallbacksSuccessCursorPrefetchParams _message = new IdbCallbacksSuccessCursorPrefetchParams();

            _message.keys = keys;

            _message.primaryKeys = primaryKeys;

            _message.values = values;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SUCCESS_CURSOR_PREFETCH_ORDINAL)));

        }


        @Override
        public void successArray(
IdbReturnValue[] values) {

            IdbCallbacksSuccessArrayParams _message = new IdbCallbacksSuccessArrayParams();

            _message.values = values;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SUCCESS_ARRAY_ORDINAL)));

        }


        @Override
        public void successKey(
IdbKey key) {

            IdbCallbacksSuccessKeyParams _message = new IdbCallbacksSuccessKeyParams();

            _message.key = key;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SUCCESS_KEY_ORDINAL)));

        }


        @Override
        public void successInteger(
long value) {

            IdbCallbacksSuccessIntegerParams _message = new IdbCallbacksSuccessIntegerParams();

            _message.value = value;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SUCCESS_INTEGER_ORDINAL)));

        }


        @Override
        public void success(
) {

            IdbCallbacksSuccessParams _message = new IdbCallbacksSuccessParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SUCCESS_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<IdbCallbacks> {

        Stub(org.chromium.mojo.system.Core core, IdbCallbacks impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                IdbCallbacks_Internal.MANAGER, messageWithHeader);





                    case ERROR_ORDINAL: {

                        IdbCallbacksErrorParams data =
                                IdbCallbacksErrorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().error(data.code, data.message);
                        return true;
                    }





                    case SUCCESS_STRING_LIST_ORDINAL: {

                        IdbCallbacksSuccessStringListParams data =
                                IdbCallbacksSuccessStringListParams.deserialize(messageWithHeader.getPayload());

                        getImpl().successStringList(data.value);
                        return true;
                    }





                    case BLOCKED_ORDINAL: {

                        IdbCallbacksBlockedParams data =
                                IdbCallbacksBlockedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().blocked(data.existingVersion);
                        return true;
                    }





                    case UPGRADE_NEEDED_ORDINAL: {

                        IdbCallbacksUpgradeNeededParams data =
                                IdbCallbacksUpgradeNeededParams.deserialize(messageWithHeader.getPayload());

                        getImpl().upgradeNeeded(data.database, data.oldVersion, data.dataLoss, data.dataLossMessage, data.dbMetadata);
                        return true;
                    }





                    case SUCCESS_DATABASE_ORDINAL: {

                        IdbCallbacksSuccessDatabaseParams data =
                                IdbCallbacksSuccessDatabaseParams.deserialize(messageWithHeader.getPayload());

                        getImpl().successDatabase(data.database, data.metadata);
                        return true;
                    }





                    case SUCCESS_CURSOR_ORDINAL: {

                        IdbCallbacksSuccessCursorParams data =
                                IdbCallbacksSuccessCursorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().successCursor(data.cursor, data.key, data.primaryKey, data.value);
                        return true;
                    }





                    case SUCCESS_VALUE_ORDINAL: {

                        IdbCallbacksSuccessValueParams data =
                                IdbCallbacksSuccessValueParams.deserialize(messageWithHeader.getPayload());

                        getImpl().successValue(data.value);
                        return true;
                    }





                    case SUCCESS_CURSOR_CONTINUE_ORDINAL: {

                        IdbCallbacksSuccessCursorContinueParams data =
                                IdbCallbacksSuccessCursorContinueParams.deserialize(messageWithHeader.getPayload());

                        getImpl().successCursorContinue(data.key, data.primaryKey, data.value);
                        return true;
                    }





                    case SUCCESS_CURSOR_PREFETCH_ORDINAL: {

                        IdbCallbacksSuccessCursorPrefetchParams data =
                                IdbCallbacksSuccessCursorPrefetchParams.deserialize(messageWithHeader.getPayload());

                        getImpl().successCursorPrefetch(data.keys, data.primaryKeys, data.values);
                        return true;
                    }





                    case SUCCESS_ARRAY_ORDINAL: {

                        IdbCallbacksSuccessArrayParams data =
                                IdbCallbacksSuccessArrayParams.deserialize(messageWithHeader.getPayload());

                        getImpl().successArray(data.values);
                        return true;
                    }





                    case SUCCESS_KEY_ORDINAL: {

                        IdbCallbacksSuccessKeyParams data =
                                IdbCallbacksSuccessKeyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().successKey(data.key);
                        return true;
                    }





                    case SUCCESS_INTEGER_ORDINAL: {

                        IdbCallbacksSuccessIntegerParams data =
                                IdbCallbacksSuccessIntegerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().successInteger(data.value);
                        return true;
                    }





                    case SUCCESS_ORDINAL: {

                        IdbCallbacksSuccessParams.deserialize(messageWithHeader.getPayload());

                        getImpl().success();
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), IdbCallbacks_Internal.MANAGER, messageWithHeader, receiver);




























                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class IdbCallbacksErrorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int code;
        public org.chromium.mojo_base.mojom.String16 message;

        private IdbCallbacksErrorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCallbacksErrorParams() {
            this(0);
        }

        public static IdbCallbacksErrorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCallbacksErrorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCallbacksErrorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCallbacksErrorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCallbacksErrorParams(elementsOrVersion);
                    {
                        
                    result.code = decoder0.readInt(8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.message = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.code, 8);
            
            encoder0.encode(this.message, 16, false);
        }
    }



    
    static final class IdbCallbacksSuccessStringListParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16[] value;

        private IdbCallbacksSuccessStringListParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCallbacksSuccessStringListParams() {
            this(0);
        }

        public static IdbCallbacksSuccessStringListParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCallbacksSuccessStringListParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCallbacksSuccessStringListParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCallbacksSuccessStringListParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCallbacksSuccessStringListParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.value = new org.chromium.mojo_base.mojom.String16[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.value[i1] = org.chromium.mojo_base.mojom.String16.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.value == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.value.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.value.length; ++i0) {
                    
                    encoder1.encode(this.value[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class IdbCallbacksBlockedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long existingVersion;

        private IdbCallbacksBlockedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCallbacksBlockedParams() {
            this(0);
        }

        public static IdbCallbacksBlockedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCallbacksBlockedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCallbacksBlockedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCallbacksBlockedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCallbacksBlockedParams(elementsOrVersion);
                    {
                        
                    result.existingVersion = decoder0.readLong(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.existingVersion, 8);
        }
    }



    
    static final class IdbCallbacksUpgradeNeededParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported database;
        public long oldVersion;
        public int dataLoss;
        public String dataLossMessage;
        public IdbDatabaseMetadata dbMetadata;

        private IdbCallbacksUpgradeNeededParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCallbacksUpgradeNeededParams() {
            this(0);
        }

        public static IdbCallbacksUpgradeNeededParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCallbacksUpgradeNeededParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCallbacksUpgradeNeededParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCallbacksUpgradeNeededParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCallbacksUpgradeNeededParams(elementsOrVersion);
                    {
                        
                    result.database = decoder0.readAssociatedServiceInterfaceNotSupported(8, false);
                    }
                    {
                        
                    result.oldVersion = decoder0.readLong(16);
                    }
                    {
                        
                    result.dataLoss = decoder0.readInt(24);
                        IdbDataLoss.validate(result.dataLoss);
                    }
                    {
                        
                    result.dataLossMessage = decoder0.readString(32, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                    result.dbMetadata = IdbDatabaseMetadata.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.database, 8, false);
            
            encoder0.encode(this.oldVersion, 16);
            
            encoder0.encode(this.dataLoss, 24);
            
            encoder0.encode(this.dataLossMessage, 32, false);
            
            encoder0.encode(this.dbMetadata, 40, false);
        }
    }



    
    static final class IdbCallbacksSuccessDatabaseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported database;
        public IdbDatabaseMetadata metadata;

        private IdbCallbacksSuccessDatabaseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCallbacksSuccessDatabaseParams() {
            this(0);
        }

        public static IdbCallbacksSuccessDatabaseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCallbacksSuccessDatabaseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCallbacksSuccessDatabaseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCallbacksSuccessDatabaseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCallbacksSuccessDatabaseParams(elementsOrVersion);
                    {
                        
                    result.database = decoder0.readAssociatedServiceInterfaceNotSupported(8, true);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.metadata = IdbDatabaseMetadata.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.database, 8, true);
            
            encoder0.encode(this.metadata, 16, false);
        }
    }



    
    static final class IdbCallbacksSuccessCursorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported cursor;
        public IdbKey key;
        public IdbKey primaryKey;
        public IdbValue value;

        private IdbCallbacksSuccessCursorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCallbacksSuccessCursorParams() {
            this(0);
        }

        public static IdbCallbacksSuccessCursorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCallbacksSuccessCursorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCallbacksSuccessCursorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCallbacksSuccessCursorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCallbacksSuccessCursorParams(elementsOrVersion);
                    {
                        
                    result.cursor = decoder0.readAssociatedServiceInterfaceNotSupported(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.key = IdbKey.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.primaryKey = IdbKey.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, true);
                    result.value = IdbValue.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.cursor, 8, false);
            
            encoder0.encode(this.key, 16, false);
            
            encoder0.encode(this.primaryKey, 24, false);
            
            encoder0.encode(this.value, 32, true);
        }
    }



    
    static final class IdbCallbacksSuccessValueParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public IdbReturnValue value;

        private IdbCallbacksSuccessValueParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCallbacksSuccessValueParams() {
            this(0);
        }

        public static IdbCallbacksSuccessValueParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCallbacksSuccessValueParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCallbacksSuccessValueParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCallbacksSuccessValueParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCallbacksSuccessValueParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.value = IdbReturnValue.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.value, 8, true);
        }
    }



    
    static final class IdbCallbacksSuccessCursorContinueParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public IdbKey key;
        public IdbKey primaryKey;
        public IdbValue value;

        private IdbCallbacksSuccessCursorContinueParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCallbacksSuccessCursorContinueParams() {
            this(0);
        }

        public static IdbCallbacksSuccessCursorContinueParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCallbacksSuccessCursorContinueParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCallbacksSuccessCursorContinueParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCallbacksSuccessCursorContinueParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCallbacksSuccessCursorContinueParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.key = IdbKey.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.primaryKey = IdbKey.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.value = IdbValue.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.key, 8, false);
            
            encoder0.encode(this.primaryKey, 16, false);
            
            encoder0.encode(this.value, 24, true);
        }
    }



    
    static final class IdbCallbacksSuccessCursorPrefetchParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public IdbKey[] keys;
        public IdbKey[] primaryKeys;
        public IdbValue[] values;

        private IdbCallbacksSuccessCursorPrefetchParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCallbacksSuccessCursorPrefetchParams() {
            this(0);
        }

        public static IdbCallbacksSuccessCursorPrefetchParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCallbacksSuccessCursorPrefetchParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCallbacksSuccessCursorPrefetchParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCallbacksSuccessCursorPrefetchParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCallbacksSuccessCursorPrefetchParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.keys = new IdbKey[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.keys[i1] = IdbKey.decode(decoder2);
                        }
                    }
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.primaryKeys = new IdbKey[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.primaryKeys[i1] = IdbKey.decode(decoder2);
                        }
                    }
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.values = new IdbValue[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.values[i1] = IdbValue.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.keys == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.keys.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.keys.length; ++i0) {
                    
                    encoder1.encode(this.keys[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
            
            if (this.primaryKeys == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.primaryKeys.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.primaryKeys.length; ++i0) {
                    
                    encoder1.encode(this.primaryKeys[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
            
            if (this.values == null) {
                encoder0.encodeNullPointer(24, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.values.length, 24, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.values.length; ++i0) {
                    
                    encoder1.encode(this.values[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class IdbCallbacksSuccessArrayParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public IdbReturnValue[] values;

        private IdbCallbacksSuccessArrayParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCallbacksSuccessArrayParams() {
            this(0);
        }

        public static IdbCallbacksSuccessArrayParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCallbacksSuccessArrayParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCallbacksSuccessArrayParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCallbacksSuccessArrayParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCallbacksSuccessArrayParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.values = new IdbReturnValue[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.values[i1] = IdbReturnValue.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.values == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.values.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.values.length; ++i0) {
                    
                    encoder1.encode(this.values[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class IdbCallbacksSuccessKeyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public IdbKey key;

        private IdbCallbacksSuccessKeyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCallbacksSuccessKeyParams() {
            this(0);
        }

        public static IdbCallbacksSuccessKeyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCallbacksSuccessKeyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCallbacksSuccessKeyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCallbacksSuccessKeyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCallbacksSuccessKeyParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.key = IdbKey.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.key, 8, false);
        }
    }



    
    static final class IdbCallbacksSuccessIntegerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long value;

        private IdbCallbacksSuccessIntegerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCallbacksSuccessIntegerParams() {
            this(0);
        }

        public static IdbCallbacksSuccessIntegerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCallbacksSuccessIntegerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCallbacksSuccessIntegerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCallbacksSuccessIntegerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCallbacksSuccessIntegerParams(elementsOrVersion);
                    {
                        
                    result.value = decoder0.readLong(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.value, 8);
        }
    }



    
    static final class IdbCallbacksSuccessParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private IdbCallbacksSuccessParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCallbacksSuccessParams() {
            this(0);
        }

        public static IdbCallbacksSuccessParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCallbacksSuccessParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCallbacksSuccessParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCallbacksSuccessParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCallbacksSuccessParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



}
