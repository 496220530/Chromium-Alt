
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/indexeddb/indexeddb.mojom
//

package org.chromium.blink.mojom;

import org.chromium.mojo.bindings.DeserializationException;


class IdbFactory_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<IdbFactory, IdbFactory.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<IdbFactory, IdbFactory.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.IDBFactory";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, IdbFactory impl) {
            return new Stub(core, impl);
        }

        @Override
        public IdbFactory[] buildArray(int size) {
          return new IdbFactory[size];
        }
    };


    private static final int GET_DATABASE_NAMES_ORDINAL = 0;

    private static final int OPEN_ORDINAL = 1;

    private static final int DELETE_DATABASE_ORDINAL = 2;

    private static final int ABORT_TRANSACTIONS_AND_COMPACT_DATABASE_ORDINAL = 3;

    private static final int ABORT_TRANSACTIONS_FOR_DATABASE_ORDINAL = 4;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements IdbFactory.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void getDatabaseNames(
org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks, org.chromium.url.mojom.Origin origin) {

            IdbFactoryGetDatabaseNamesParams _message = new IdbFactoryGetDatabaseNamesParams();

            _message.callbacks = callbacks;

            _message.origin = origin;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_DATABASE_NAMES_ORDINAL)));

        }


        @Override
        public void open(
org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported databaseCallbacks, org.chromium.url.mojom.Origin origin, org.chromium.mojo_base.mojom.String16 name, long version, long transactionId) {

            IdbFactoryOpenParams _message = new IdbFactoryOpenParams();

            _message.callbacks = callbacks;

            _message.databaseCallbacks = databaseCallbacks;

            _message.origin = origin;

            _message.name = name;

            _message.version = version;

            _message.transactionId = transactionId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(OPEN_ORDINAL)));

        }


        @Override
        public void deleteDatabase(
org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks, org.chromium.url.mojom.Origin origin, org.chromium.mojo_base.mojom.String16 name, boolean forceClose) {

            IdbFactoryDeleteDatabaseParams _message = new IdbFactoryDeleteDatabaseParams();

            _message.callbacks = callbacks;

            _message.origin = origin;

            _message.name = name;

            _message.forceClose = forceClose;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DELETE_DATABASE_ORDINAL)));

        }


        @Override
        public void abortTransactionsAndCompactDatabase(
org.chromium.url.mojom.Origin origin, 
AbortTransactionsAndCompactDatabaseResponse callback) {

            IdbFactoryAbortTransactionsAndCompactDatabaseParams _message = new IdbFactoryAbortTransactionsAndCompactDatabaseParams();

            _message.origin = origin;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ABORT_TRANSACTIONS_AND_COMPACT_DATABASE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new IdbFactoryAbortTransactionsAndCompactDatabaseResponseParamsForwardToCallback(callback));

        }


        @Override
        public void abortTransactionsForDatabase(
org.chromium.url.mojom.Origin origin, 
AbortTransactionsForDatabaseResponse callback) {

            IdbFactoryAbortTransactionsForDatabaseParams _message = new IdbFactoryAbortTransactionsForDatabaseParams();

            _message.origin = origin;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ABORT_TRANSACTIONS_FOR_DATABASE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new IdbFactoryAbortTransactionsForDatabaseResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<IdbFactory> {

        Stub(org.chromium.mojo.system.Core core, IdbFactory impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                IdbFactory_Internal.MANAGER, messageWithHeader);





                    case GET_DATABASE_NAMES_ORDINAL: {

                        IdbFactoryGetDatabaseNamesParams data =
                                IdbFactoryGetDatabaseNamesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getDatabaseNames(data.callbacks, data.origin);
                        return true;
                    }





                    case OPEN_ORDINAL: {

                        IdbFactoryOpenParams data =
                                IdbFactoryOpenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().open(data.callbacks, data.databaseCallbacks, data.origin, data.name, data.version, data.transactionId);
                        return true;
                    }





                    case DELETE_DATABASE_ORDINAL: {

                        IdbFactoryDeleteDatabaseParams data =
                                IdbFactoryDeleteDatabaseParams.deserialize(messageWithHeader.getPayload());

                        getImpl().deleteDatabase(data.callbacks, data.origin, data.name, data.forceClose);
                        return true;
                    }






                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), IdbFactory_Internal.MANAGER, messageWithHeader, receiver);













                    case ABORT_TRANSACTIONS_AND_COMPACT_DATABASE_ORDINAL: {

                        IdbFactoryAbortTransactionsAndCompactDatabaseParams data =
                                IdbFactoryAbortTransactionsAndCompactDatabaseParams.deserialize(messageWithHeader.getPayload());

                        getImpl().abortTransactionsAndCompactDatabase(data.origin, new IdbFactoryAbortTransactionsAndCompactDatabaseResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case ABORT_TRANSACTIONS_FOR_DATABASE_ORDINAL: {

                        IdbFactoryAbortTransactionsForDatabaseParams data =
                                IdbFactoryAbortTransactionsForDatabaseParams.deserialize(messageWithHeader.getPayload());

                        getImpl().abortTransactionsForDatabase(data.origin, new IdbFactoryAbortTransactionsForDatabaseResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class IdbFactoryGetDatabaseNamesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks;
        public org.chromium.url.mojom.Origin origin;

        private IdbFactoryGetDatabaseNamesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbFactoryGetDatabaseNamesParams() {
            this(0);
        }

        public static IdbFactoryGetDatabaseNamesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbFactoryGetDatabaseNamesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbFactoryGetDatabaseNamesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbFactoryGetDatabaseNamesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbFactoryGetDatabaseNamesParams(elementsOrVersion);
                    {
                        
                    result.callbacks = decoder0.readAssociatedServiceInterfaceNotSupported(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.origin = org.chromium.url.mojom.Origin.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.callbacks, 8, false);
            
            encoder0.encode(this.origin, 16, false);
        }
    }



    
    static final class IdbFactoryOpenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 56;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(56, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported databaseCallbacks;
        public org.chromium.url.mojom.Origin origin;
        public org.chromium.mojo_base.mojom.String16 name;
        public long version;
        public long transactionId;

        private IdbFactoryOpenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbFactoryOpenParams() {
            this(0);
        }

        public static IdbFactoryOpenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbFactoryOpenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbFactoryOpenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbFactoryOpenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbFactoryOpenParams(elementsOrVersion);
                    {
                        
                    result.callbacks = decoder0.readAssociatedServiceInterfaceNotSupported(8, false);
                    }
                    {
                        
                    result.databaseCallbacks = decoder0.readAssociatedServiceInterfaceNotSupported(16, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.origin = org.chromium.url.mojom.Origin.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.name = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    result.version = decoder0.readLong(40);
                    }
                    {
                        
                    result.transactionId = decoder0.readLong(48);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.callbacks, 8, false);
            
            encoder0.encode(this.databaseCallbacks, 16, false);
            
            encoder0.encode(this.origin, 24, false);
            
            encoder0.encode(this.name, 32, false);
            
            encoder0.encode(this.version, 40);
            
            encoder0.encode(this.transactionId, 48);
        }
    }



    
    static final class IdbFactoryDeleteDatabaseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks;
        public org.chromium.url.mojom.Origin origin;
        public org.chromium.mojo_base.mojom.String16 name;
        public boolean forceClose;

        private IdbFactoryDeleteDatabaseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbFactoryDeleteDatabaseParams() {
            this(0);
        }

        public static IdbFactoryDeleteDatabaseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbFactoryDeleteDatabaseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbFactoryDeleteDatabaseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbFactoryDeleteDatabaseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbFactoryDeleteDatabaseParams(elementsOrVersion);
                    {
                        
                    result.callbacks = decoder0.readAssociatedServiceInterfaceNotSupported(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.origin = org.chromium.url.mojom.Origin.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.name = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    result.forceClose = decoder0.readBoolean(32, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.callbacks, 8, false);
            
            encoder0.encode(this.origin, 16, false);
            
            encoder0.encode(this.name, 24, false);
            
            encoder0.encode(this.forceClose, 32, 0);
        }
    }



    
    static final class IdbFactoryAbortTransactionsAndCompactDatabaseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Origin origin;

        private IdbFactoryAbortTransactionsAndCompactDatabaseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbFactoryAbortTransactionsAndCompactDatabaseParams() {
            this(0);
        }

        public static IdbFactoryAbortTransactionsAndCompactDatabaseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbFactoryAbortTransactionsAndCompactDatabaseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbFactoryAbortTransactionsAndCompactDatabaseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbFactoryAbortTransactionsAndCompactDatabaseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbFactoryAbortTransactionsAndCompactDatabaseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.origin = org.chromium.url.mojom.Origin.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.origin, 8, false);
        }
    }



    
    static final class IdbFactoryAbortTransactionsAndCompactDatabaseResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int status;

        private IdbFactoryAbortTransactionsAndCompactDatabaseResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbFactoryAbortTransactionsAndCompactDatabaseResponseParams() {
            this(0);
        }

        public static IdbFactoryAbortTransactionsAndCompactDatabaseResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbFactoryAbortTransactionsAndCompactDatabaseResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbFactoryAbortTransactionsAndCompactDatabaseResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbFactoryAbortTransactionsAndCompactDatabaseResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbFactoryAbortTransactionsAndCompactDatabaseResponseParams(elementsOrVersion);
                    {
                        
                    result.status = decoder0.readInt(8);
                        IdbStatus.validate(result.status);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.status, 8);
        }
    }

    static class IdbFactoryAbortTransactionsAndCompactDatabaseResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final IdbFactory.AbortTransactionsAndCompactDatabaseResponse mCallback;

        IdbFactoryAbortTransactionsAndCompactDatabaseResponseParamsForwardToCallback(IdbFactory.AbortTransactionsAndCompactDatabaseResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ABORT_TRANSACTIONS_AND_COMPACT_DATABASE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                IdbFactoryAbortTransactionsAndCompactDatabaseResponseParams response = IdbFactoryAbortTransactionsAndCompactDatabaseResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.status);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class IdbFactoryAbortTransactionsAndCompactDatabaseResponseParamsProxyToResponder implements IdbFactory.AbortTransactionsAndCompactDatabaseResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        IdbFactoryAbortTransactionsAndCompactDatabaseResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer status) {
            IdbFactoryAbortTransactionsAndCompactDatabaseResponseParams _response = new IdbFactoryAbortTransactionsAndCompactDatabaseResponseParams();

            _response.status = status;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ABORT_TRANSACTIONS_AND_COMPACT_DATABASE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class IdbFactoryAbortTransactionsForDatabaseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Origin origin;

        private IdbFactoryAbortTransactionsForDatabaseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbFactoryAbortTransactionsForDatabaseParams() {
            this(0);
        }

        public static IdbFactoryAbortTransactionsForDatabaseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbFactoryAbortTransactionsForDatabaseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbFactoryAbortTransactionsForDatabaseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbFactoryAbortTransactionsForDatabaseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbFactoryAbortTransactionsForDatabaseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.origin = org.chromium.url.mojom.Origin.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.origin, 8, false);
        }
    }



    
    static final class IdbFactoryAbortTransactionsForDatabaseResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int status;

        private IdbFactoryAbortTransactionsForDatabaseResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbFactoryAbortTransactionsForDatabaseResponseParams() {
            this(0);
        }

        public static IdbFactoryAbortTransactionsForDatabaseResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbFactoryAbortTransactionsForDatabaseResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbFactoryAbortTransactionsForDatabaseResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbFactoryAbortTransactionsForDatabaseResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbFactoryAbortTransactionsForDatabaseResponseParams(elementsOrVersion);
                    {
                        
                    result.status = decoder0.readInt(8);
                        IdbStatus.validate(result.status);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.status, 8);
        }
    }

    static class IdbFactoryAbortTransactionsForDatabaseResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final IdbFactory.AbortTransactionsForDatabaseResponse mCallback;

        IdbFactoryAbortTransactionsForDatabaseResponseParamsForwardToCallback(IdbFactory.AbortTransactionsForDatabaseResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ABORT_TRANSACTIONS_FOR_DATABASE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                IdbFactoryAbortTransactionsForDatabaseResponseParams response = IdbFactoryAbortTransactionsForDatabaseResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.status);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class IdbFactoryAbortTransactionsForDatabaseResponseParamsProxyToResponder implements IdbFactory.AbortTransactionsForDatabaseResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        IdbFactoryAbortTransactionsForDatabaseResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer status) {
            IdbFactoryAbortTransactionsForDatabaseResponseParams _response = new IdbFactoryAbortTransactionsForDatabaseResponseParams();

            _response.status = status;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ABORT_TRANSACTIONS_FOR_DATABASE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
