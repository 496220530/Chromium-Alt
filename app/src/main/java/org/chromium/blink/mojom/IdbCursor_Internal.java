
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/indexeddb/indexeddb.mojom
//

package org.chromium.blink.mojom;

import org.chromium.mojo.bindings.DeserializationException;


class IdbCursor_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<IdbCursor, IdbCursor.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<IdbCursor, IdbCursor.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.IDBCursor";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, IdbCursor impl) {
            return new Stub(core, impl);
        }

        @Override
        public IdbCursor[] buildArray(int size) {
          return new IdbCursor[size];
        }
    };


    private static final int ADVANCE_ORDINAL = 0;

    private static final int CURSOR_CONTINUE_ORDINAL = 1;

    private static final int PREFETCH_ORDINAL = 2;

    private static final int PREFETCH_RESET_ORDINAL = 3;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements IdbCursor.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void advance(
int count, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks) {

            IdbCursorAdvanceParams _message = new IdbCursorAdvanceParams();

            _message.count = count;

            _message.callbacks = callbacks;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADVANCE_ORDINAL)));

        }


        @Override
        public void cursorContinue(
IdbKey key, IdbKey primaryKey, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks) {

            IdbCursorCursorContinueParams _message = new IdbCursorCursorContinueParams();

            _message.key = key;

            _message.primaryKey = primaryKey;

            _message.callbacks = callbacks;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CURSOR_CONTINUE_ORDINAL)));

        }


        @Override
        public void prefetch(
int count, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks) {

            IdbCursorPrefetchParams _message = new IdbCursorPrefetchParams();

            _message.count = count;

            _message.callbacks = callbacks;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(PREFETCH_ORDINAL)));

        }


        @Override
        public void prefetchReset(
int usedPrefetches, int unusedPrefetches) {

            IdbCursorPrefetchResetParams _message = new IdbCursorPrefetchResetParams();

            _message.usedPrefetches = usedPrefetches;

            _message.unusedPrefetches = unusedPrefetches;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(PREFETCH_RESET_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<IdbCursor> {

        Stub(org.chromium.mojo.system.Core core, IdbCursor impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                IdbCursor_Internal.MANAGER, messageWithHeader);





                    case ADVANCE_ORDINAL: {

                        IdbCursorAdvanceParams data =
                                IdbCursorAdvanceParams.deserialize(messageWithHeader.getPayload());

                        getImpl().advance(data.count, data.callbacks);
                        return true;
                    }





                    case CURSOR_CONTINUE_ORDINAL: {

                        IdbCursorCursorContinueParams data =
                                IdbCursorCursorContinueParams.deserialize(messageWithHeader.getPayload());

                        getImpl().cursorContinue(data.key, data.primaryKey, data.callbacks);
                        return true;
                    }





                    case PREFETCH_ORDINAL: {

                        IdbCursorPrefetchParams data =
                                IdbCursorPrefetchParams.deserialize(messageWithHeader.getPayload());

                        getImpl().prefetch(data.count, data.callbacks);
                        return true;
                    }





                    case PREFETCH_RESET_ORDINAL: {

                        IdbCursorPrefetchResetParams data =
                                IdbCursorPrefetchResetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().prefetchReset(data.usedPrefetches, data.unusedPrefetches);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), IdbCursor_Internal.MANAGER, messageWithHeader, receiver);










                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class IdbCursorAdvanceParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int count;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks;

        private IdbCursorAdvanceParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCursorAdvanceParams() {
            this(0);
        }

        public static IdbCursorAdvanceParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCursorAdvanceParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCursorAdvanceParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCursorAdvanceParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCursorAdvanceParams(elementsOrVersion);
                    {
                        
                    result.count = decoder0.readInt(8);
                    }
                    {
                        
                    result.callbacks = decoder0.readAssociatedServiceInterfaceNotSupported(12, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.count, 8);
            
            encoder0.encode(this.callbacks, 12, false);
        }
    }



    
    static final class IdbCursorCursorContinueParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public IdbKey key;
        public IdbKey primaryKey;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks;

        private IdbCursorCursorContinueParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCursorCursorContinueParams() {
            this(0);
        }

        public static IdbCursorCursorContinueParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCursorCursorContinueParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCursorCursorContinueParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCursorCursorContinueParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCursorCursorContinueParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.key = IdbKey.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.primaryKey = IdbKey.decode(decoder1);
                    }
                    {
                        
                    result.callbacks = decoder0.readAssociatedServiceInterfaceNotSupported(24, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.key, 8, false);
            
            encoder0.encode(this.primaryKey, 16, false);
            
            encoder0.encode(this.callbacks, 24, false);
        }
    }



    
    static final class IdbCursorPrefetchParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int count;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported callbacks;

        private IdbCursorPrefetchParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCursorPrefetchParams() {
            this(0);
        }

        public static IdbCursorPrefetchParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCursorPrefetchParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCursorPrefetchParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCursorPrefetchParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCursorPrefetchParams(elementsOrVersion);
                    {
                        
                    result.count = decoder0.readInt(8);
                    }
                    {
                        
                    result.callbacks = decoder0.readAssociatedServiceInterfaceNotSupported(12, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.count, 8);
            
            encoder0.encode(this.callbacks, 12, false);
        }
    }



    
    static final class IdbCursorPrefetchResetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int usedPrefetches;
        public int unusedPrefetches;

        private IdbCursorPrefetchResetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IdbCursorPrefetchResetParams() {
            this(0);
        }

        public static IdbCursorPrefetchResetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IdbCursorPrefetchResetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IdbCursorPrefetchResetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IdbCursorPrefetchResetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IdbCursorPrefetchResetParams(elementsOrVersion);
                    {
                        
                    result.usedPrefetches = decoder0.readInt(8);
                    }
                    {
                        
                    result.unusedPrefetches = decoder0.readInt(12);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.usedPrefetches, 8);
            
            encoder0.encode(this.unusedPrefetches, 12);
        }
    }



}
